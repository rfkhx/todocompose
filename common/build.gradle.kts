import org.jetbrains.compose.compose

plugins {
    kotlin("multiplatform")
    id("org.jetbrains.compose")
    id("com.android.library")
    id("kotlin-parcelize")
    id("com.squareup.sqldelight")
    id("kotlin-kapt")
}

val appVersionCode: String by ext
val appVersionName: String by ext
val channel by lazy {
    try {
        File(rootProject.projectDir, "build/CHANNEL").readText().trim().ifBlank { "local_test" }
    } catch (e: Exception) {
        e.printStackTrace()
        "local_test"
    }
}

group = "top.ntutn"
version = appVersionName

kotlin {
    android()
    jvm("desktop") {
        compilations.all {
            kotlinOptions.jvmTarget = "11"
        }
    }
    sourceSets {
        val commonMain by getting {
            kotlin.setSrcDirs(listOf("build/generated/source/appInfo", "src/commonMain/kotlin"))
            dependencies {
                api(compose.runtime)
                api(compose.foundation)
                api(compose.material)
                api(Deps.decompose)
                api(Deps.decomposeJetBrainsExtension)
            }
        }
        val commonTest by getting
        val androidMain by getting {
            dependencies {
                api(Deps.androidXAppCompat)
                api(Deps.androidXCore)
                implementation(Deps.sqlDelightAndroidDriver)
                compileOnly(Deps.autoService)
                configurations.get("kapt").dependencies.add(
                    org.gradle.api.internal.artifacts.dependencies.DefaultExternalModuleDependency(
                        "com.google.auto.service", "auto-service", Versions.AUTO_SERVICE
                    )
                )
            }
        }
        val androidTest by getting {
            dependencies {
                implementation(Deps.junit)
            }
        }
        val desktopMain by getting {
            dependencies {
                api(compose.preview)
                implementation(Deps.sqlDelightDriver)
                compileOnly(Deps.autoService)
                configurations.get("kapt").dependencies.add(
                    org.gradle.api.internal.artifacts.dependencies.DefaultExternalModuleDependency(
                        "com.google.auto.service", "auto-service", Versions.AUTO_SERVICE
                    )
                )
            }
        }
        val desktopTest by getting
    }
}

android {
    compileSdk = 31
    sourceSets["main"].manifest.srcFile("src/androidMain/AndroidManifest.xml")
    defaultConfig {
        buildToolsVersion = "31.0.0"
        minSdk = 24
        targetSdk = 31
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
}

sqldelight {
    database("MyDatabase") { // This will be the name of the generated database class.
        packageName = "top.ntutn"
    }
}

val generateAppInfoFile = tasks.register("generateAppInfoFile") {
    val content = """
        // Do not modify this file. It was generated by build.gradle.kts in common module
        object AppInfo {
            const val VERSION_CODE = $appVersionCode
            const val VERSION_NAME = "$appVersionName"
            const val CHANNEL = "$channel"
        }
    """.trimIndent()
    val appInfoDir = File(project.buildDir, "generated/source/appInfo")
    appInfoDir.mkdirs()
    val appInfoFile = File(appInfoDir, "AppInfo.kt")
    appInfoFile.writeText(content)
}

tasks.matching {
    it.name in listOf("preBuild", "syncDebugLibJars")
}.all {
    dependsOn(generateAppInfoFile)
}